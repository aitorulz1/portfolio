{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/usuario/Desktop/portfolio-cliente-main/src/context/jobs/jobsState.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from 'react';\nimport clienteAxios from '../../service/axios';\nimport jobsContext from './jobsContext';\nimport jobsReducer from './jobsReducer';\nimport { AGREGAR_JOBS, OBTENER_JOBS, ELIMINAR_JOBS, EDITAR_JOB, JOB_ACTUAL, JOB_ERROR } from '../../types';\n\nconst JobsState = props => {\n  _s();\n\n  const initialState = {\n    formulario: false,\n    jobs: []\n  };\n  const [state, dispatch] = useReducer(jobsReducer, initialState);\n\n  const obtenerJobs = async jobs => {\n    try {\n      const resultado = await clienteAxios.get('/jobs', jobs);\n      dispatch({\n        type: OBTENER_JOBS,\n        payload: resultado.data\n      });\n    } catch (error) {\n      const alerta = {\n        msg: 'Hubo un error',\n        categoria: 'alerta-error'\n      };\n      dispatch({\n        type: JOB_ERROR,\n        payload: alerta\n      });\n    }\n  };\n\n  const agregarJobs = async job => {\n    try {\n      const resultado = await clienteAxios.post('/jobs', job);\n      dispatch({\n        type: AGREGAR_JOBS,\n        payload: resultado.data\n      });\n    } catch (error) {\n      const alerta = {\n        msg: 'Hubo un error',\n        categoria: 'alerta-error'\n      };\n      dispatch({\n        type: JOB_ERROR,\n        payload: alerta\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(jobsContext.Provider, {\n    value: {\n      formulario: state.formulario,\n      jobs: state.jobs,\n      obtenerJobs,\n      agregarJobs\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n};\n\n_s(JobsState, \"h4meAN672mISt93ielJXXMKemns=\");\n\n_c = JobsState;\nexport default JobsState;\n\nvar _c;\n\n$RefreshReg$(_c, \"JobsState\");","map":{"version":3,"sources":["/Users/usuario/Desktop/portfolio-cliente-main/src/context/jobs/jobsState.js"],"names":["React","useReducer","clienteAxios","jobsContext","jobsReducer","AGREGAR_JOBS","OBTENER_JOBS","ELIMINAR_JOBS","EDITAR_JOB","JOB_ACTUAL","JOB_ERROR","JobsState","props","initialState","formulario","jobs","state","dispatch","obtenerJobs","resultado","get","type","payload","data","error","alerta","msg","categoria","agregarJobs","job","post","children"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AAEA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,SACIC,YADJ,EAEIC,YAFJ,EAGIC,aAHJ,EAIIC,UAJJ,EAKIC,UALJ,EAMIC,SANJ,QAOO,aAPP;;AASA,MAAMC,SAAS,GAAGC,KAAK,IAAI;AAAA;;AAEvB,QAAMC,YAAY,GAAG;AACjBC,IAAAA,UAAU,EAAE,KADK;AAEjBC,IAAAA,IAAI,EAAE;AAFW,GAArB;AAMA,QAAM,CAAEC,KAAF,EAASC,QAAT,IAAsBhB,UAAU,CAACG,WAAD,EAAcS,YAAd,CAAtC;;AAGA,QAAMK,WAAW,GAAG,MAAMH,IAAN,IAAc;AAC9B,QAAI;AACA,YAAMI,SAAS,GAAG,MAAMjB,YAAY,CAACkB,GAAb,CAAiB,OAAjB,EAA0BL,IAA1B,CAAxB;AAEAE,MAAAA,QAAQ,CAAC;AACLI,QAAAA,IAAI,EAAEf,YADD;AAELgB,QAAAA,OAAO,EAAEH,SAAS,CAACI;AAFd,OAAD,CAAR;AAKH,KARD,CAQE,OAAOC,KAAP,EAAc;AACZ,YAAMC,MAAM,GAAG;AACXC,QAAAA,GAAG,EAAE,eADM;AAEXC,QAAAA,SAAS,EAAE;AAFA,OAAf;AAIAV,MAAAA,QAAQ,CAAC;AACLI,QAAAA,IAAI,EAAEX,SADD;AAELY,QAAAA,OAAO,EAAEG;AAFJ,OAAD,CAAR;AAIH;AACJ,GAnBD;;AAsBA,QAAMG,WAAW,GAAG,MAAMC,GAAN,IAAa;AAC7B,QAAI;AACA,YAAMV,SAAS,GAAG,MAAMjB,YAAY,CAAC4B,IAAb,CAAkB,OAAlB,EAA2BD,GAA3B,CAAxB;AAEAZ,MAAAA,QAAQ,CAAC;AACLI,QAAAA,IAAI,EAAEhB,YADD;AAELiB,QAAAA,OAAO,EAAEH,SAAS,CAACI;AAFd,OAAD,CAAR;AAKH,KARD,CAQE,OAAOC,KAAP,EAAc;AACZ,YAAMC,MAAM,GAAG;AACXC,QAAAA,GAAG,EAAE,eADM;AAEXC,QAAAA,SAAS,EAAE;AAFA,OAAf;AAIAV,MAAAA,QAAQ,CAAC;AACLI,QAAAA,IAAI,EAAEX,SADD;AAELY,QAAAA,OAAO,EAAEG;AAFJ,OAAD,CAAR;AAIH;AACJ,GAnBD;;AAsBA,sBACI,QAAC,WAAD,CAAa,QAAb;AACI,IAAA,KAAK,EAAE;AACHX,MAAAA,UAAU,EAAEE,KAAK,CAACF,UADf;AAEHC,MAAAA,IAAI,EAAEC,KAAK,CAACD,IAFT;AAGHG,MAAAA,WAHG;AAIHU,MAAAA;AAJG,KADX;AAAA,cAQKhB,KAAK,CAACmB;AARX;AAAA;AAAA;AAAA;AAAA,UADJ;AAaH,CApED;;GAAMpB,S;;KAAAA,S;AAsEN,eAAeA,SAAf","sourcesContent":["import React, { useReducer } from 'react';\r\nimport clienteAxios from '../../service/axios';\r\n\r\nimport jobsContext from './jobsContext';\r\nimport jobsReducer from './jobsReducer';\r\n\r\nimport {\r\n    AGREGAR_JOBS,\r\n    OBTENER_JOBS,\r\n    ELIMINAR_JOBS,\r\n    EDITAR_JOB,\r\n    JOB_ACTUAL,\r\n    JOB_ERROR\r\n} from '../../types';\r\n\r\nconst JobsState = props => {\r\n\r\n    const initialState = {\r\n        formulario: false,\r\n        jobs: []\r\n    \r\n    }\r\n\r\n    const [ state, dispatch ] = useReducer(jobsReducer, initialState);\r\n\r\n\r\n    const obtenerJobs = async jobs => {\r\n        try {\r\n            const resultado = await clienteAxios.get('/jobs', jobs)\r\n\r\n            dispatch({\r\n                type: OBTENER_JOBS,\r\n                payload: resultado.data\r\n            })\r\n            \r\n        } catch (error) {\r\n            const alerta = {\r\n                msg: 'Hubo un error',\r\n                categoria: 'alerta-error'\r\n            }\r\n            dispatch({\r\n                type: JOB_ERROR,\r\n                payload: alerta\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    const agregarJobs = async job => {\r\n        try {\r\n            const resultado = await clienteAxios.post('/jobs', job);\r\n\r\n            dispatch({\r\n                type: AGREGAR_JOBS,\r\n                payload: resultado.data\r\n            })\r\n            \r\n        } catch (error) {\r\n            const alerta = {\r\n                msg: 'Hubo un error',\r\n                categoria: 'alerta-error'\r\n            }\r\n            dispatch({\r\n                type: JOB_ERROR,\r\n                payload: alerta\r\n            })\r\n        }\r\n    } \r\n\r\n\r\n    return(\r\n        <jobsContext.Provider   \r\n            value={{\r\n                formulario: state.formulario,\r\n                jobs: state.jobs,\r\n                obtenerJobs,\r\n                agregarJobs\r\n            }}\r\n        >\r\n            {props.children}\r\n        </jobsContext.Provider>\r\n    )\r\n\r\n}\r\n\r\nexport default JobsState;"]},"metadata":{},"sourceType":"module"}